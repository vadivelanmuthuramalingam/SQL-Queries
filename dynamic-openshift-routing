<dependency>
    <groupId>io.fabric8</groupId>
    <artifactId>kubernetes-client</artifactId>
    <version>6.x.x</version>
</dependency>



import io.fabric8.kubernetes.client.KubernetesClient;
import io.fabric8.kubernetes.client.KubernetesClientBuilder;
import io.fabric8.openshift.api.model.Route;
import io.fabric8.openshift.api.model.RouteBuilder;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Configuration;

import javax.annotation.PostConstruct;

@Configuration
public class OpenShiftRouteConfig {

    private static final Logger logger = LoggerFactory.getLogger(OpenShiftRouteConfig.class);

    @Value("${spring.openshift.route.expose:false}")
    private boolean exposeRoute;

    @Value("${spring.application.name:spring-boot-app}")
    private String appName;

    @Value("${spring.openshift.route.host:}")
    private String routeHost;

    @Value("${spring.openshift.namespace:default}")
    private String namespace;

    private final KubernetesClient client;

    public OpenShiftRouteConfig() {
        this.client = new KubernetesClientBuilder().build();
    }

    @PostConstruct
    public void createRouteIfNeeded() {
        if (exposeRoute) {
            logger.info("Exposing OpenShift route for application: {}", appName);
            try {
                Route route = new RouteBuilder()
                        .withNewMetadata()
                        .withName(appName + "-route")
                        .withNamespace(namespace)
                        .endMetadata()
                        .withNewSpec()
                        .withHost(routeHost) // Optional: Set a custom hostname
                        .withNewTo()
                        .withKind("Service")
                        .withName(appName)
                        .endTo()
                        .endSpec()
                        .build();

                client.adapt(io.fabric8.openshift.client.OpenShiftClient.class)
                      .routes()
                      .inNamespace(namespace)
                      .createOrReplace(route);

                logger.info("OpenShift route exposed: {}", routeHost != null ? routeHost : "Default Host");
            } catch (Exception e) {
                logger.error("Failed to create OpenShift route: {}", e.getMessage(), e);
            }
        } else {
            logger.info("OpenShift route expose property is disabled.");
        }
    }
}





spring:
  openshift:
    route:
      expose: true             # Set to true to create the route
      host: myapp.example.com  # Optional: Custom host for the route
    namespace: my-namespace    # Namespace where the application is deployed
  application:
    name: my-spring-boot-app   # Service name to target



